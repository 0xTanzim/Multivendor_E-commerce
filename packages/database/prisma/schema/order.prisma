enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model Order {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String? @db.ObjectId
  firstName     String
  lastName      String
  email         String
  phoneNumber   String
  streetAddress String
  city          String
  country       String
  postalCode    String
  shippingCost  Float
  paymentMethod String
  orderNumber   String?

  orderStatus  OrderStatus @default(PENDING)
  paymentToken String      @default("")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  OrderItem    OrderItem[]
  Sale         Sale[]
  Payment      Payment[]
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  vendorId  String
  qty       Int
  price     Float
  title     String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String   @db.ObjectId
  vendorId        String   @db.ObjectId
  total           Float
  productQty      Int
  productPrice    Float
  productTitle    String
  productImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])
  product         Product  @relation(fields: [productId], references: [id])
  vendor          User     @relation(fields: [vendorId], references: [id])
}
